#!/usr/bin/perl
use Math::Trig;
use Switch;

$doo=2.755333333;
$ohperiodicvec[0][0]=$doo;
$ohperiodicvec[0][1]=0;
$ohperiodicvec[1][0]=$doo*cos(pi/3);
$ohperiodicvec[1][1]=$doo*sin(pi/3);

#          x         
#         A          
#        /           
#     b/             
#     /              
#   /                
#  /        a        
# x---------------->x

if($#ARGV<8) {
  print "input format:\n";
  print "1. name of CONFIG/REVCON-file with surface\n";
  print "2. name of corresponding FIELD-file\n";
  print "3. name of mol2-file with molecule\n";
  print "4. name of output CONFIG-file\n";
  print "5. name of output FIELD-file\n";
  print "6. reconst. vector 1 factor for a\n";
  print "7. reconst. vector 1 factor for b\n";
  print "8. reconst. vector 2 factor for a\n";
  print "9. reconst. vector 2 factor for b\n";
  print "[10. mol shift vector in multiples of a]\n";
  print "[11. mol shift vector in multiples of b]\n";
  print "[12. (mono/bi/tri)-dentat binding]\n";
  exit;
}

$factor[0][0]=$ARGV[5]; # first index: new vector, second index: old vector
$factor[0][1]=$ARGV[6];
$factor[1][0]=$ARGV[7];
$factor[1][1]=$ARGV[8];
$molshiftvec[0]=$ARGV[9];
$molshiftvec[1]=$ARGV[10];
if(lc(substr($ARGV[11],0,4)) eq "mono" or lc(substr($ARGV[11],0,2)) eq "bi" or lc(substr($ARGV[11],0,3)) eq "tri") {
  $bindingmode=$ARGV[11];
} else {
  $bindingmode=undef;
}

if($factor[0][0]==$factor[1][0] and $factor[0][1]==$factor[1][1]) {
  print "error: vectors must not be equal\n";
  exit;
}

$molperiodicvec[0][0]=$factor[0][0]*$ohperiodicvec[0][0]+$factor[0][1]*$ohperiodicvec[1][0];
$molperiodicvec[0][1]=$factor[0][0]*$ohperiodicvec[0][1]+$factor[0][1]*$ohperiodicvec[1][1];
$molperiodicvec[1][0]=$factor[1][0]*$ohperiodicvec[0][0]+$factor[1][1]*$ohperiodicvec[1][0];
$molperiodicvec[1][1]=$factor[1][0]*$ohperiodicvec[0][1]+$factor[1][1]*$ohperiodicvec[1][1];

# indices for cdata array:
# 0 name
# 1 x
# 2 y
# 3 z
# 4 velocity x
# 5 velocity y
# 6 velocity z
# 7 force x
# 8 force y
# 9 force z

#load molecule
open(MOL2, "<", $ARGV[2]) or die "Can't open mol2-file:\n$!";
while(<MOL2>) {
  if(/ATOM/) { last; }
}

$mol2charge = 0;
$i=0;
while(<MOL2>) {
  $string = $_;
  if(/BOND/) {
    last;
  } else {
    ($mdata[$i][1],$mdata[$i][2],$mdata[$i][3],$mdata[$i][0],$mdata[$i][4]) =
    /^\s*\d+\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+\S+\s+\S+\s+(\S+)/; # position, type and charge
    $mol2charge += $mdata[$i][4];
    $i++;
  }
}
close(MOL2);
$mol2charge = sprintf("%.0f",$mol2charge);
if(not defined($bindingmode)) {
  if($mol2charge==0) {
    $bindingmode="neutral";
  }elsif($mol2charge==-1) {
    $bindingmode="mono";
  }elsif($mol2charge==-2) {
    $bindingmode="bi";
  }
}

open(CONFIG, "<", $ARGV[0]) or die "Can't open CONFIG-file:\n$!";
open(FIELD, "<", $ARGV[1]) or die "Can't open FIELD-file:\n$!";
# open(TEST, ">", "test.xyz") or die "Can't open test.xyz\n$!\n";

#read header of CONFIG-file
$title=<CONFIG>;
$_=<CONFIG>;
$config_header[0]=$_;
($config_key,$periodic_key) = /^\s+(\S+)\s+(\S+)/;
if(not ($periodic_key==1 or $periodic_key==2 or $periodic_key==6)) {
  print "sorry, this script is only implemented for rectangular cells\n";
  exit;
}
switch($periodic_key) {
  case [1,2,6] {
    for($j=0;$j<=2;$j++) {
      $_=<CONFIG>;
      $config_header[$j+1]=$_;
      ($vec[$j][0], $vec[$j][1], $vec[$j][2]) = /\s*(\S*)\s*(\S*)\s*(\S*)/;
      $size[$j]=$vec[$j][$j]/2;
    }
  } case 0 {
    print "error: periodic conditions needed for calculation\n";
    exit;
  } else {
    print "sorry, this script is only implemented for rectangular cells\n";
    exit;
  }
}

# read FIELD file and rest of CONFIG file
while(<FIELD>) {
  if(/molecules/ or /MOLECULES/) { last; }
}
($field_nummols) = /^\s*\S+\s+(\S+)/;
#   print "found $field_nummols molecules\n";
if($field_nummols==0) {
  print "no molecules found in FIELD file\n";
  exit;
}

$mol2name=substr($ARGV[2],0,-5);
$i=0; #atom index
$zmin=7; #cutoff for surface atoms
$xmin=9999; # to find hydroxide in lower left corner
$ymin=9999; # to find hydroxide in lower left corner
$foundox=-1;
$foundhydrox=-1;
$foundal=-1;
$foundmol2name=-1;
for($t=0;$t<$field_nummols;$t++) {
  $j = 0; #number of atoms counted for the molecule
  $_=<FIELD>;
  $mol_name[$t]=$_;
  $mol_name[$t] =~ s/^\s+//;
  $mol_name[$t] =~ s/\s+$//;
  if($mol_name[$t] eq $mol2name) {
    $foundmol2name=$t
  }
  $startatomindex[$t]=$i;
  if(/^\s*oxygen/ or /^\s*OXYGEN/ or /^\s*Oxygen/ ) {
    if(/free/ or /Free/ or /FREE/) {
      $foundox=$t;
    }
  } elsif(/^\s*hydroxide/ or /^\s*HYDROXIDE/ or /^\s*Hydroxide/ ) {
    $foundhydrox=$t;
  } elsif(/^\s*aluminum/ or /^\s*ALUMINUM/ or /^\s*Aluminum/ ) {
    $foundal=$t;
  }
  $_=<FIELD>;
  ($mol_numents[$t])=/^\s*\S+\s+(\S+)/;
  $_=<FIELD>;
  ($mol_numatoms[$t])=/^\s*\S+\s+(\S+)/;
#   print "found ".$mol_numatoms[$t]." in $t. molecule named ".$mol_name[$t]." with ".$mol_numents[$t]." entities\n";
  while(<FIELD>) {
    if(/FINISH/ or /finish/ or /CLOSE/ or /close/ or /BONDS/
       or /bonds/ or /ANGLES/ or /angles/ or /DIHEDRALS/ or /dihedrals/) {
      if(not (/FINISH/ or /finish/)) {
	while(<FIELD>) { 
	  if(/FINISH/ or /finish/) { last; }
	}
      }
      last;
    }
    ($mol_atomname[$t][$j],$mol_atommass[$t][$j],$mol_atomcharge[$t][$j])=/^\s*(\S+)\s+(\S+)\s+(\S+)/;
#     printf "%8s %3.5f %3.5f\n", $mol_atomname[$t][$j],$mol_atommass[$t][$j],$mol_atomcharge[$t][$j];
    $j++;
  }
  if($j!=$mol_numatoms[$t]) {
    print "error: ".$mol_numatoms[$t]." expected for molecule ".$mol_name[$t]." but ".$j." were found\n";
    exit;
  }
  # read atom coordinates for the molecule from the CONFIG file
  for($m=0;$m<$mol_numents[$t];$m++) {
    for($a=0;$a<$mol_numatoms[$t];$a++) {
      $_=<CONFIG>;
      ($cdata[$i][0]) = /^\s*(\S*)/;
      if($cdata[$i][0] ne $mol_atomname[$t][$a]) {
	print "error: atom name".$cdata[$i][0]." in CONFIG-file does not match\n";
	print "name ".$mol_atomname[$t][$a]." in FIELD file for molecule ".$mol_name[$t]."\n";
	exit;
      }
      $_=<CONFIG>;
      ($cdata[$i][1],$cdata[$i][2],$cdata[$i][3]) = /^\s*(\S*)\s*(\S*)\s*(\S*)/;
      if($config_key>0) { #read velocity
	$_=<CONFIG>;
	($cdata[$i][4],$cdata[$i][5],$cdata[$i][6]) = /^\s*(\S*)\s*(\S*)\s*(\S*)/;
	if($config_key>1) { #read force
	  $_=<CONFIG>;
	  ($cdata[$i][7],$cdata[$i][8],$cdata[$i][9]) = /^\s*(\S*)\s*(\S*)\s*(\S*)/;
	}
      }
      if(uc($cdata[$i][0]) eq 'OX') {
	@surfox[$#surfox+1]=splice(@cdata,$i,1);
	if($surfox[$#surfox][1]<$xmin) {
	  $xmin=$surfox[$#surfox][1];
	}
	if($surfox[$#surfox][2]<$ymin) {
	  $ymin=$surfox[$#surfox][2];
	}
      } elsif(uc($cdata[$i][0]) eq 'HG') {
	@surfhg[$#surfhg+1]=splice(@cdata,$i,1);
      } else {
	$i++;
      }
    }
  $endatomindex[$t]=$i;
  }
}
close(CONFIG, FIELD);

if($foundox==-1) {
  print "error: could not find entry for oxygen in FIELD file!\n";
  exit;
}
if($foundhydrox==-1) {
  print "error: could not find entry for hydroxide ions in FIELD file!\n";
  exit;
}
if($foundmol2name==-1) {
  print "error: could not find entry for molecule name in FIELD file!\n";
  exit;
}

# @surfox = sort { $a->[10] <=> $b->[10] } @surfox;
# @surfox = sort { $a->[11] <=> $b->[11] } @surfox;

$imax = 100;

$ohremoved=0;
if($bindingmode eq "mono") {
  $i=0;
  for($x=-$imax;$x<=$imax;$x++) {
    for($y=-$imax;$y<=$imax;$y++) {
      $molpos[$i][0]=$xmin+$x*$molperiodicvec[0][0]+$y*$molperiodicvec[1][0]
                     +$molshiftvec[0]*$ohperiodicvec[0][0]+$molshiftvec[1]*$ohperiodicvec[1][0];
      $molpos[$i][1]=$ymin+$x*$molperiodicvec[0][1]+$y*$molperiodicvec[1][1]
                     +$molshiftvec[0]*$ohperiodicvec[0][1]+$molshiftvec[1]*$ohperiodicvec[1][1];
      if($molpos[$i][0] > -$size[0] and $molpos[$i][0] < $size[0] and 
	$molpos[$i][1] > -$size[1] and $molpos[$i][1] < $size[1]) {
	$i++;
      }
    }
  }
  $#molpos=$i-1;

  #remove corresponding hydroxides
  for($i=0;$i<=$#molpos;$i++) {
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $remove[0][0] = $j;
	    $remove[0][1] = $surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	    $remove[0][2] = $surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	    $dmin=$dist;
	  }
	}
      }
    }
    $molpos[$i][0]=$remove[0][1];
    $molpos[$i][1]=$remove[0][2];
    $molpos[$i][2]=$surfox[$remove[0][0]][3];
    splice(@surfox,$remove[0][0],1);
    splice(@surfhg,$remove[0][0],1);
    $ohremoved++;
  }
} elsif($bindingmode eq "bi") {
  $i=0;
  for($x=-$imax;$x<=$imax;$x++) {
    for($y=-$imax;$y<=$imax;$y++) {
      $molpos[$i][0]=$xmin+$x*$molperiodicvec[0][0]+$y*$molperiodicvec[1][0]
                     +($molshiftvec[0]+0.5)*$ohperiodicvec[0][0]+$molshiftvec[1]*$ohperiodicvec[1][0];
      $molpos[$i][1]=$ymin+$x*$molperiodicvec[0][1]+$y*$molperiodicvec[1][1]
                     +$molshiftvec[0]*$ohperiodicvec[0][1]+$molshiftvec[1]*$ohperiodicvec[1][1];
      if($molpos[$i][0] > -$size[0] and $molpos[$i][0] <= $size[0] and 
	$molpos[$i][1] > -$size[1] and $molpos[$i][1] <= $size[1]) {
	$i++;
      }
    }
  }
  $#molpos=$i-1;
  #remove corresponding hydroxides
  for($i=0;$i<=$#molpos;$i++) {
    printf OUTCFG "\n%8s %19.12e %19.12e %19.12e","N",$molpos[0],$molpos[1],$molpos[2];
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0]+0.5*$ohperiodicvec[0][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $remove[0][0] = $j;
	    $remove[0][1] = $surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	    $remove[0][2] = $surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	    $dmin=$dist;
	  }
	}
      }
    }
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0]-0.5*$ohperiodicvec[0][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $remove[1][0] = $j;
	    $remove[1][1] = $surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	    $remove[1][2] = $surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	    $dmin=$dist;
	  }
	}
      }
    }
    $molpos[$i][0]=($remove[0][1]+$remove[1][1])/2;
    $molpos[$i][1]=($remove[0][2]+$remove[1][2])/2;
    $molpos[$i][2]=($surfox[$remove[0][0]][3]+$surfox[$remove[1][0]][3])/2;
    $surfox[$remove[0][0]][0]="F";
    $surfox[$remove[1][0]][0]="F";
    @remove = sort { $a->[0] <=> $b->[0] } @remove;
    splice(@surfox,$remove[1][0],1);
    splice(@surfhg,$remove[1][0],1);
    splice(@surfox,$remove[0][0],1);
    splice(@surfhg,$remove[0][0],1);
    $ohremoved+=2;
  }
} elsif($bindingmode eq "tri") {
  $i=0;
  for($x=-$imax;$x<=$imax;$x++) {
    for($y=-$imax;$y<=$imax;$y++) {
      $molpos[$i][0]=$xmin+$x*$molperiodicvec[0][0]+$y*$molperiodicvec[1][0]
                     +$molshiftvec[0]*$ohperiodicvec[0][0]+$molshiftvec[1]*$ohperiodicvec[1][0];
      $molpos[$i][1]=$ymin+$x*$molperiodicvec[0][1]+$y*$molperiodicvec[1][1]
                     +$molshiftvec[0]*$ohperiodicvec[0][1]+$molshiftvec[1]*$ohperiodicvec[1][1];
      if($molpos[$i][0] > -$size[0] and $molpos[$i][0] <= $size[0] and 
	$molpos[$i][1] > -$size[1] and $molpos[$i][1] <= $size[1]) {
	$i++;
      }
    }
  }
  $#molpos=$i-1;
  #remove corresponding hydroxides
  for($i=0;$i<=$#molpos;$i++) {
    printf OUTCFG "\n%8s %19.12e %19.12e %19.12e","N",$molpos[0],$molpos[1],$molpos[2];
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $remove[0][0] = $j;
	    $remove[0][1] = $surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	    $remove[0][2] = $surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	    $dmin=$dist;
	  }
	}
      }
    }
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0]+$ohperiodicvec[0][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $remove[1][0] = $j;
	    $remove[1][1] = $surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	    $remove[1][2] = $surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	    $dmin=$dist;
	  }
	}
      }
    }
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0]+$ohperiodicvec[1][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1]+$ohperiodicvec[1][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $remove[2][0] = $j;
	    $remove[2][1] = $surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0];
	    $remove[2][2] = $surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1];
	    $dmin=$dist;
	  }
	}
      }
    }
#     $molpos[$i][0]=($remove[0][1]+$remove[1][1])/2;
#     $molpos[$i][1]=($remove[0][2]+$remove[1][2])/2;
    $molpos[$i][2]=($surfox[$remove[0][0]][3]+$surfox[$remove[1][0]][3]+$surfox[$remove[2][0]][3])/3;
    $surfox[$remove[0][0]][0]="F";
    $surfox[$remove[1][0]][0]="F";
    $surfox[$remove[2][0]][0]="F";
    @remove = sort { $a->[0] <=> $b->[0] } @remove;
    splice(@surfox,$remove[2][0],1);
    splice(@surfhg,$remove[2][0],1);
    splice(@surfox,$remove[1][0],1);
    splice(@surfhg,$remove[1][0],1);
    splice(@surfox,$remove[0][0],1);
    splice(@surfhg,$remove[0][0],1);
    $ohremoved+=3;
    #replace one hydroxide by oxide to neutralize charge
    $dmin=99999;
    for($j=0;$j<=$#surfox;$j++) {
      for($x=-1;$x<2;$x++) {
	for($y=-1;$y<2;$y++) {
	  $dx=$molpos[$i][0]-$surfox[$j][1]+$x*$vec[0][0]+$y*$vec[1][0]+$ohperiodicvec[1][0]+$ohperiodicvec[0][0];
	  $dy=$molpos[$i][1]-$surfox[$j][2]+$x*$vec[0][1]+$y*$vec[1][1]+$ohperiodicvec[1][1]+$ohperiodicvec[0][1];
	  $dist=sqrt($dx**2+$dy**2);
	  if($dist<$dmin) {
	    $oxidize=$j;
	    $dmin=$dist;
	  }
	}
      }
    }
    $surfox[$oxidize][0]="OA";
    @cdata[$#cdata+1]=splice(@surfox,$oxidize,1);
    splice(@surfhg,$oxidize,1);
    
  }
} else {
  print "don't know what to do for binding mode \"$bindingmode\" :-/\n";
  exit;
}

print "replaced $ohremoved hydroxides by ".($#molpos+1)." molecules in $bindingmode"."dentate coordination\n";

open(OUTCFG,">",$ARGV[3]);
$index=1;
printf OUTCFG $title;
printf OUTCFG "%10u", $config_key; # OUTCFG file key
printf OUTCFG "%10u", $periodic_key; # periodic boundary key
printf OUTCFG "\n%19.12e %19.12e %19.12e", $vec[0][0], $vec[0][1], $vec[0][2];
printf OUTCFG "\n%19.12e %19.12e %19.12e", $vec[1][0], $vec[1][1], $vec[1][2];
printf OUTCFG "\n%19.12e %19.12e %19.12e", $vec[2][0], $vec[2][1], $vec[2][2];
for($i=0;$i<=$#molpos;$i++) {
  for($j=0;$j<=$#mdata;$j++) {
    printf OUTCFG "\n%-8s %9u", uc($mdata[$j][0]), $index;
    printf OUTCFG "\n%19.12e",$mdata[$j][1]+$molpos[$i][0];
    printf OUTCFG  " %19.12e",$mdata[$j][2]+$molpos[$i][1];
    printf OUTCFG  " %19.12e",$mdata[$j][3]+$molpos[$i][2];
    for($k=0;$k<$config_key;$k++) {
      printf OUTCFG " \n%19.12e %19.12e %19.12e", 0, 0, 0;
    }
    $index++;
  }
}
for($i=0;$i<=$#surfox;$i++) {
  printf OUTCFG "\n%-8s %9u", $surfox[$i][0], $index;
  printf OUTCFG "\n%19.12e %19.12e %19.12e",$surfox[$i][1],$surfox[$i][2],$surfox[$i][3];
  for($k=0;$k<$config_key;$k++) {
    printf OUTCFG " \n%19.12e %19.12e %19.12e", 0, 0, 0;
  }
  $index++;
  
  printf OUTCFG "\n%-8s %9u", $surfhg[$i][0], $index;
  printf OUTCFG "\n%19.12e %19.12e %19.12e",$surfhg[$i][1],$surfhg[$i][2],$surfhg[$i][3];
  for($k=0;$k<$config_key;$k++) {
    printf OUTCFG " \n%19.12e %19.12e %19.12e", 0, 0, 0;
  }
  $index++;
}
for($i=0;$i<=$#cdata;$i++) {
  printf OUTCFG "\n%-8s %9u", $cdata[$i][0], $index;
  printf OUTCFG "\n%19.12e %19.12e %19.12e",$cdata[$i][1],$cdata[$i][2],$cdata[$i][3];
  for($k=0;$k<$config_key;$k++) {
    printf OUTCFG " \n%19.12e %19.12e %19.12e", 0, 0, 0;
  }
  $index++;
}
close(OUTCFG);

open(FIELD, "<", $ARGV[1]) or die "Can't open FIELD-file:\n$!";
open(OUTFLD, ">", $ARGV[4]) or die "Can't open FIELD-file:\n$!";

while(<FIELD>) {
  if(/^\s*hydroxide/ or /^\s*HYDROXIDE/ or /^\s*Hydroxide/ ) {
    print OUTFLD $_;
    $_=<FIELD>;
    $n = $#surfox+1;
    print OUTFLD "NUMMOLS $n\n";
  } elsif((/^\s*oxygen/ or /^\s*OXYGEN/ or /^\s*Oxygen/) and
    (/free/ or /FREE/ or /Free/) and $bindingmode eq "tri") {
    print OUTFLD $_;
    $_=<FIELD>;
    ($n)=/NUMMOLS\s+(\S+)/;
    $n += $#molpos+1;
    print OUTFLD "NUMMOLS $n\n";
  } elsif(/$mol2name/) {
    print OUTFLD $_;
    $_=<FIELD>;
    ($n)=/NUMMOLS\s+(\S+)/;
    $n += $#molpos+1;
    print OUTFLD "NUMMOLS $n\n";
  } else {
    print OUTFLD $_;
  }
}
close(FIELD, OUTFLD);